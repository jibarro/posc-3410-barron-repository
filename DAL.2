# Title: POSC-3410 Lab 2 ####
# Author: Jake Barron
# Date 01/22/2021

# Lesson 1 ####

# Load tidyverse package
library(tidyverse)
# Load data  
data(mpg)

# Lesson 2 ####

# Check the structure of mpg using str()
str(mpg)
# Answer below (using a comment) what type of data structure mpg is?
# data.frame
# Create analysis data frame: We do this so we preserve a raw version of the dataframe to which we can refer as we make
mpg_df<-mpg

# Check the structure of mpg_df using str()
str(mpg_df)

# Scatter plot of displ x hwy
ggplot(mpg_df, aes(x=displ , y=hwy ))+
  geom_point()

# Scatter plot of displ x hwy by fuel type (fl)
ggplot(mpg_df, aes(x=displ , y=hwy, color=fl ) )+
  geom_point()

# On Your Own, Scatter plot of displ x hwy by class
ggplot(mpg_df, aes(x=displ , y=hwy, color=class ) )+
  geom_point()

## # A tibble: 5 x 11
##   manufacturer model   displ  year   cyl trans    drv     cty   hwy fl    class 
##   <chr>        <chr>   <dbl> <int> <int> <chr>    <chr> <int> <int> <chr> <chr> 
## 1 chevrolet    corvet…   5.7  1999     8 manual(… r        16    26 p     2seat…
## 2 chevrolet    corvet…   5.7  1999     8 auto(l4) r        15    23 p     2seat…
## 3 chevrolet    corvet…   6.2  2008     8 manual(… r        16    26 p     2seat…
## 4 chevrolet    corvet…   6.2  2008     8 auto(s6) r        15    25 p     2seat…
## 5 chevrolet    corvet…   7    2008     8 manual(… r        15    24 p     2seat…

# Lesson 3 ####
?ggplot()

# Call help for filter
?filter
# Call help for geom_bar()
?geom_bar()
# Call help for facet_wrap()
?facet_wrap()

# ggplot - data layer, assign it to mpg_data
mpg_data<-ggplot(data= mpg)

# Call mpg_data
mpg_data

# Describe the output you see in the console. 
# I see a grey box.
# Now, let's add an aesthetic layer to the plot.

# Put engine size on the x-axis, highway mileage on y-axis, and color by class. 
mpg_plot<-mpg_data +
  geom_point(mapping = aes(x=displ , y=hwy, color=class))

# Call mpg_plot. 
mpg_plot
# What do you see?
# I see a scatter plot with hwy as the Y-axis and displacement as the x-axis.  The key shows class and colors are assigned to the different types of vehicles.    
# Now, let's add an aesthetic layer to change the axis labels
mpg_axis <- mpg_plot +
  xlab("Engine Size in Liters")+
  ylab("Highway Mileage")+
  ggtitle("Engine Size and Mileage by Vehicle Class")

# Call mpg_axis 
mpg_axis

# What do you see? 
# I see Highway Mileage as the Y-Axis and Engine Size in Liters as the X-Axis.  The Title of the scatter plot is Engine Size and Mileage by Vehicle Class.
# Create different graphs for each class
mpg_wrap<-mpg_axis + 
  facet_wrap(~class, nrow=2)

# Call mpg_wrap 
mpg_wrap

# What do you see? 
# There are separate scatter plots for each class of vehicle.  The X and Y Axis remained the same and the plots are color coded.  

# Re-assign mpg_wrap by adding facet wrapping, change nrow to 3.
mpg_wrap<-mpg_axis + 
  facet_wrap(~class, nrow=3)
mpg_wrap
# What do you see? 
# The scatter plots are still separate, but they are arranged differently now. 

# Lesson 4 ####
install.packages("nycflights13")

# call tidyverse package
library(tidyverse) 
# Call nycflights13 and print flights in console.
library(nycflights13)

# Filter to keep only the flights that happened on 3-14. 
filter(flights, month==3, day==14)

# Assign flights that happened on 3-14 to new variable: `Mar14`.

# Select flights that happened in either May or June
filter(flights, month == 5 | month == 6)

# Filter flights  whose arrival was delayed over 60 minutes AND departed on time. 
filter(flights, (arr_delay > 60 & dep_delay < 1))

# Filter flights whose arrival was delayed over 60 minutes AND departure was delayed less than 15 minutes.
filter(flights, (arr_delay > 60 & dep_delay < 15))

# Filter flights whose arrival was delayed over 60 minutes AND departure was delayed 15 minutes or more (i.e., remember to use your Greater Than or Equal To Operator).
filter(flights, (arr_delay > 60 & dep_delay >= 15))

# Filter flights whose destination is Greenville-Spartanburg International Airport (GSP)
filter(flights, dest=="GSP")
       
# Filter flights that were in the air over 3 hours (180 mins)
filter(flights, (air_time > 180))

# Effects of NAs on Logical Operations
NA == 99
## [1] NA
NA > 3 
## [1] NA
NA < 3 
## [1] NA

# Number of Wins for Clemson Football in the 2021 season
Clemson <- NA 

# Number of Wins for Ohio State football in the 2021 season 
OSU <- NA

# Do Clemson and OSU have the same number of wins
Clemson == OSU
## [1] NA
# Interpret this result using a comment your script file. 
# We do not know how many wins either team has, but that doesn't mean they both have 0 wins.  We simply dont have enough information to know the answer.  

# use is.na(varName) to find whether it is NA. This command returns a logical vector of either TRUE or FALSE. See the example below. 
is.na(Clemson)
## [1] TRUE
is.na(OSU)
## [1] TRUE
# Now let's see how it works on a data frame. 
is.na(flights)

# Describe what you see. 
# Let's see what happens when we combine filter() and is.na(). We will search for NAs in arrival delay. 
filter(flights, is.na(arr_delay))

# We will search for observations with NO NAs in arrival delay. 
filter(flights, !is.na(arr_delay))

# In the real world, we often want to know how many observations are in each subset data frame. We will do this by calling nrow() outside of the filter commands. 

# Number of observations in flights data set with missing data for arrival delay. 
nrow(filter(flights, is.na(arr_delay)))
## [1] 9430
# Number of observations in flights data set with NO missing data for arrival delay. 
nrow(filter(flights, !is.na(arr_delay)))
## [1] 327346
# On your own, number of observations in flights data set with missing data for departure delay. 
nrow(filter(flights, is.na(dep_delay)))
## [1] 8255
# On your own, number of observations in flights data set with no missing data for departure delay. 
nrow(filter(flights, !is.na(dep_delay)))
## [1] 328521
# In the real world, we often will filter out NAs across several variables and assign the resulting data frame to a new variable. 
flights_df<-filter(flights, (!is.na(arr_delay) & !is.na(dep_delay)))

# Call flights_df
flights_df

# On your own, filter out NAs across year, month, dep_delay, arr_delay, carrier, flight, air_time. Assign the resulting data frame to a new variable: flights_df 
flights_df<-filter(flights, !is.na(arr_delay) & !is.na(dep_delay) & !is.na(carrier) & !is.na(flight) & !is.na(air_time) & !is.na(year) & !is.na(month))

# Call flights_df
flights_df

# Create sample dataframe  using sequence (use the help command to learn more about sequence)
sample<- sequence(10, from=10L, by=-1L )

sample_df <- as_tibble(sample) 

# Call sample_df 
sample_df
# Describe what the results that were returned.
# Integers were listed from 10 to 1.

# Arrange from 10 to 1. 
arrange(sample_df, value)

# Describe what the results that were returned. 
# The integers were flipped and listed from 1 to 10 

# Create sample dataframe with values from 1:100  using sequence. 
sample<- sequence(100, from=1L, by=1L )

sample_df <- as_tibble(sample) 
# Call sample_df 
sample_df
# Describe what the results that were returned.
# The integers were listed from 1 to 10, but their are now 90 more rows

# Arrange sample_df$value in descending order using the syntax, arrange(df, desc(varible))
arrange(sample_df, desc(varible))

# Describe what the results that were returned.
# It produced an error: arrange() failed at implicit mutate() step. 

# What happens when we use arrange on a real life data frame (i.e., one that has missing values).
# The program thinks the x object 'variable' is not found and can't run.  

# Arrange flights by arrival delay and assign to arrange_df
arrange_df<-arrange(flights, arr_delay)

# Call the last six rows of  (call help on tail() to find out more)
tail(arrange_df) 

# Lets try arranging data on your own. 
# Arrange flights to find the most delayed flights. 
arrange(flights, dep_delay)

# Arrange the flights that left earliest.
arrange(flights, dep_time)

# Example use of select 
select(flights, year, month, day, carrier, flight)

# Select call columns between year and arrival delay
select(flights, year:arr_delay)

# Select all columns except tailnum 
select(flights, -tailnum)

# Select all columns between dep_delay and time_hour. 
select(flights, dep_delay:time_hour)

# Select the following columns: year, month, day, dep_delay, arr_delay, dest, distance. Assign to flights_df.
flights_df<-select(flights, year, month, day, dep_delay, arr_delay, dest, distance)

# call flights_df
flights_df

# Check the column names 
names(sample_df)
## [1] "value"
# Rename sample_df$value as sample_df$count
rename(sample_df, count = value)

# Rename sample_df$value as sample_df$count. Assign to sample_df
sample_df <- rename(sample_df, count = value)
# call sample_df 
sample_df

# Check column names in flights
names(flights)

# Rename arr_delay as `arrival_delay`. Assign to flights. 
flights<-rename(flights, arrival_delay = arr_delay)
flights
# Rename dep_delay as `departure_delay`. Assign to flights. 
flights<-rename(flights, departure_delay = dep_delay)
# Call flights
flights

# Create dataframe with fewer variables:  flights_small
flights_small <- select(flights, 
                        year:day,
                        ends_with("delay"),
                        distance,
                        air_time,
                        dest
)
flights_small
# Create new column: avg_speed. 
mutate(flights_small,
       speed = distance / air_time * 60)
# Create new column: avg_speed. 
mutate(flights_small,
       speed = distance / air_time * 60)

# You can also use mutate to change existing variables. 
# Change destination to factor 
mutate(flights_small,
       dest = factor(dest))

# Create column `gain` using formula `dep_delay` - `arr_delay`. 
mutate(flights_small,
       gain = dep_delay - arr_delay,
       speed = distance / air_time * 60)

# Create new column for arrival delay in hours (i.e., divide by 60)
mutate(flights_small,
       arr_delay/60)

# Create new column for departure delay in hours (i.e., divide by 60)
mutate(flights_small,
       dep_delay/60)

# Change year to character 
mutate(flights_small,
       year = as.character(year))

# Create new character variable using paste0 (call help to learn more and check the hint below) to combine year, month, and day (yyyy/m/d).
Date<- paste0(...,year, month, day, collapse = NULL)

# Verse 1 as string
almaMater1<-"Where the Blue Ridge yawns its greatness; Where the Tigers play; Here the sons of dear Old Clemson, Reign supreme alway."

# Verse 2 as string
almaMater2<-"We will dream of great conquests For our past is grand, And her sons have fought and conquered Every foreign land."

# Verse 3 as string
almaMater3 <- "Where the mountains smile in grandeur O’er the hill and dale; Here the Tiger lair is nestling Swept by storm and gale."

# Verse 4 as string
almaMater4 <- "We are brothers strong in manhood For we work and strive; and our Alma Mater reigneth Forever in our lives."

# Chorus as string
almaMaterChorus <- "Dear Old Clemson, we will triumph And with all our might That the Tiger’s roar may echo O’er the mountain height."

# Combine vectors to create almaMater
almaMater<- paste0(almaMater1," ", almaMater2," ", almaMater3," ", almaMater4," ", almaMaterChorus)

# print almaMater to console.
almaMater

## [1] "Where the Blue Ridge yawns its greatness; Where the Tigers play; Here the sons of dear Old Clemson, Reign supreme alway. We will dream of great conquests For our past is grand, And her sons have fought and conquered Every foreign land. Where the mountains smile in grandeur O’er the hill and dale; Here the Tiger lair is nestling Swept by storm and gale. We are brothers strong in manhood For we work and strive; and our Alma Mater reigneth Forever in our lives. Dear Old Clemson, we will triumph And with all our might That the Tiger’s roar may echo O’er the mountain height."

# Use summarise to calculate avg (mean) arrival delay. 
summarise(flights, avgArrDelay= mean(arr_delay, na.rm=TRUE))

## # A tibble: 1 x 1
##   avgArrDelay
##         <dbl>
## 1        6.90

# Use group_by and summarise to calculate avg arrival delay for all the carriers.=
# Group flights by carrier: flights_carrier
flights_carrier <- group_by(flights, carrier)

#summarise average delay 
summarise(flights_carrier, avgArrDelay=mean(arr_delay, na.rm=TRUE))

## `summarise()` ungrouping output (override with `.groups` argument)

## # A tibble: 16 x 2
##    carrier avgArrDelay
##    <chr>         <dbl>
##  1 9E            7.38 
##  2 AA            0.364
##  3 AS           -9.93 
##  4 B6            9.46 
##  5 DL            1.64 
##  6 EV           15.8  
##  7 F9           21.9  
##  8 FL           20.1  
##  9 HA           -6.92 
## 10 MQ           10.8  
## 11 OO           11.9  
## 12 UA            3.56 
## 13 US            2.13 
## 14 VX            1.76 
## 15 WN            9.65 
## 16 YV           15.6

# Summarise standard deviation of distance to destinations
summarise(flights, )
## # A tibble: 1 x 0

# Create new data frame: not_cancelled 
not_cancelled <- filter(flights, !is.na(dep_delay) & !is.na(arr_delay))

# Group by month, mean dep_delay
not_cancelled_year<- group_by(not_cancelled, month)

# Group by carrier, summarise mean dep_delay and mean arrival delay 
flights_carrier <- group_by(flights, carrier)
summarise(flights_carrier, avgDepDelay=mean(dep_delay, na.rm=TRUE))
summarise(flights_carrier, avgArrDelay=mean(arr_delay, na.rm=TRUE))

# Group by carrier, summarise sd of distance traveled 
flights_carrier <- group_by(flights, carrier)
summarise(flights_carrier, )

# Filter for origin=="LGA". When do the first flights depart? when do they arrive? 
flights_LGA<- filter(flights, origin == "LGA")
# The first flight was scheduled to depart at 5:30AM and arrive at 8:30AM.   

# Lesson 5 ####

# Load nycflights13 packages 
library(nycflights13)
# Load data 
data("flights")

# Filter the data for November and December flights, count number of flights that arrived later than 59 minutes. Which destination airports are worst? 
# Filter, assign new varName
flights_extract<-filter(flights, month==11 | month == 12 & arr_delay>60)

# Group by destination
flights_extract <- group_by(flights_extract,dest )


# Count 
flights_extract <- count(flights_extract)

# Rename 
flights_extract <- rename(flights_extract, number = n )

# Arrange 
flights_extract <- arrange(flights_extract, desc(number))

# Keep only top 6 rows
flights_extract <- head(flights_extract, n=6)

# Make ggplot bar graph
ggplot(flights_extract, aes(x=reorder(dest,-number), y=number))+
  geom_bar(stat="identity")

# Now look at the same operations with pipes. 
flights %>% 
  filter(month==11 | month == 12 & arr_delay>60) %>% 
  group_by(dest) %>% 
  count() %>% 
  rename(number=n) %>% 
  arrange(desc(number)) %>% 
  head(6) %>% 
  ggplot(aes(x=reorder(dest,-number), y=number))+
  geom_bar(stat="identity")

# Much simpler, right? 
# Yes, much easier.

# Filter the flights data to keep only May and June flights
filter(flights, month==5 | month == 6)

# Filter the flights data to keep only April
filter(flights, month==4)

# Filter the flights data to keep only Delta flights
filter(flights, carrier=='DL')

# Which airport had the most flights from it to NYC's 3 airports? Filter flights data to keep only flights that arrived on-time or early, group by origin airport, arrange in descending order. 
flights %>% 
  filter(arr_delay<=0) %>%
  group_by(origin) %>% 
  arrange(desc(number)) %>% 
# ATL, ORD, and LAX had the most flights to NYC's 3 airports.
  
# Filter flights to keep only flights that departed JFK and arrived at ATL. Keep only origin, destination, arrival delay,  departure delay,and carrier. Create a ggplot scatterplot showing the relationship between departure delay and  arrival delay. Add carrier as color. 
flights %>% 
  filter(origin == 'JFK', dest == 'ATL') %>% 
  group_by(dest) %>% 
  count() %>% 
  rename(number=n) %>% 
  arrange(desc(number)) %>% 
  head(6) %>% 
  ggplot(aes(x=reorder(dest,-number), y=number))+
  geom_bar(stat="identity")

# To which airports did the most flights from NYC go? Make a ggplot visualization. 
flights %>% 
  filter(origin == 'NYC') %>% 
  group_by(dest) %>% 
  count() %>% 
  rename(number=n) %>% 
  arrange(desc(number)) %>% 
  head(6) %>% 
  ggplot(aes(x=reorder(dest,-number), y=number))+
  geom_bar(stat="identity")

# Which carrier had the shortest mean arrival delay? 
summarise(flights_carrier, avgArrDelay=mean(arr_delay, na.rm=TRUE))
#AS had the shortest mean arrival delay

# Which carrier experienced the most cancelled flights? 
# F9 had the most cancelled flights.

# On average, which carrier flew fastest.'
# On average American Airlines flew the fastest 

# Create new column: avg_speed. 
mutate(flights_small,
       speed = distance / air_time * 60)
